name: Publish

on:
  workflow_call:
    inputs:
      tag:
        description: "The tag used on the published images."
        type: string
        required: true
      version_script:
        description: "The JS script that retrieves the version number with which the release is published."
        type: string
        required: true
    outputs:
      version:
        description: "The version determined via `version_script`."
        value: ${{ jobs.determine-version.outputs.version }}

permissions: write-all

jobs:
  determine-version:
    name: "determine version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.find-version.outputs.result }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Install dependencies"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm install @octokit/rest
      - name: "Find version"
        id: find-version
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        with:
          result-encoding: string
          script: ${{ inputs.version_script }}

  build-and-push-api:
    name: "build and push api"
    needs:
      - determine-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create image
        uses: ./.github/actions/create-image
        with:
          IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}-api
          TAG: ${{ inputs.tag }}
          VERSION: ${{ needs.determine-version.outputs.version }}
          DOCKERFILE: ./apps/server-asset-sg/docker/Dockerfile
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-app:
    name: "build and push app"
    needs:
      - determine-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create image
        uses: ./.github/actions/create-image
        with:
          IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}-app
          TAG: ${{ inputs.tag }}
          VERSION: ${{ needs.determine-version.outputs.version }}
          DOCKERFILE: ./apps/client-asset-sg/docker/Dockerfile
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-sync:
    name: "build and push sync"
    needs:
      - determine-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create image
        uses: ./.github/actions/create-image
        with:
          IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}-sync
          TAG: ${{ inputs.tag }}
          VERSION: ${{ needs.determine-version.outputs.version }}
          DOCKERFILE: ./apps/sync-asset-sg/docker/Dockerfile
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag-commit:
    name: "tag commit"
    needs:
      - determine-version
      - build-and-push-api
      - build-and-push-app
      - build-and-push-sync
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Tag commit
        uses: ./.github/actions/tag-commit
        with:
          TAG_NAME: ${{ inputs.tag }}
          SHA: ${{ github.sha }}
      - name: Tag version
        if: ${{ inputs.tag == 'latest' }}
        uses: ./.github/actions/tag-commit
        with:
          TAG_NAME: ${{ needs.determine-version.outputs.version }}
          SHA: ${{ github.sha }}
